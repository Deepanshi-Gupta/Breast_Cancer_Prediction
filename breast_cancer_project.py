# -*- coding: utf-8 -*-
"""BREAST CANCER PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11zq49lvmFq8PzlDpT94VgjrvaeZMaaVJ

importing the Dependencie
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model  import LogisticRegression 
from sklearn.metrics   import accuracy_score

"""Data collection and processing """

#loding the data from sklearn 
breast_cancer_dataset= sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

#loding data into dataframe
data_frame=pd.DataFrame(breast_cancer_dataset.data    ,columns=breast_cancer_dataset.feature_names)

#printing the first row of dataf
data_frame.head()

#adding the target column to the dataframe
data_frame['label']=breast_cancer_dataset.target

#printing last row of dataframe
data_frame.tail()

#number of rows and column
data_frame.shape

#getting some information about data  
data_frame.info

#checking the null values
data_frame.isnull().sum()

#static measurement about data
data_frame.describe()

#checking the distribution of target variable 
data_frame['label'].value_counts()

"""1-> Benign

0-> Malignant
"""

data_frame.groupby('label').mean()

"""Seperating the data and target"""

x=data_frame.drop(columns='label' , axis=1)
y=data_frame['label']

print(x)

print(y)
#it showing label of particular colum only

"""Splitting the data into training data and testing data """

#we create 4 different arrays we split X into 2 arrays X_train and x_test
#and correxponding label for all the values in x strain stored in other 2 arraya

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2,random_state=2)#0.2 means 20% of testing data

print(x.shape,X_train.shape,X_test.shape)

"""Model traning

logistic regression
"""

model=LogisticRegression()

#fit ous X and Y in this model
#training the Logistic Regression Model

model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy score
"""

#accuracy or training data
X_train_prediction = model.predict(X_train)
training_data_accuracy= accuracy_score(Y_train,X_train_prediction)

print("Accuracy on training set = ",training_data_accuracy)
#which means out od 100 cases your model will predict 94 % correct cases

#accuracy or tesrt data
X_test_prediction = model.predict(X_test)
training_data_accuracy= accuracy_score(Y_test,X_test_prediction)

print("Accuracy on test set = ",training_data_accuracy)

"""Building a predictive System """

input_data=(18.25,19.98,119.6,1040,0.09463,0.109,0.1127,0.074,0.1794,0.05742,0.4467,0.7732,3.18,53.91,0.004314,0.01382,0.02254,0.01039,0.01369,0.002179,22.88,27.66,153.2,1606,0.1442,0.2576,0.3784,0.1932,0.3063,0.08368)
input_data2=(13.08,15.71,85.63,520,0.1075,0.127,0.04568,0.0311,0.1967,0.06811,0.1852,0.7477,1.383,14.67,0.004097,0.01898,0.01698,0.00649,0.01678,0.002425,14.5,20.49,96.09,630.5,0.1312,0.2776,0.189,0.07283,0.3184,0.08183)


#change the input data set to a numpy arraay
input_data_as_a_numpy_array=np.asarray(input_data2)

#reshape the numpy array as we are predicting for one data point 
input_data_reshape= input_data_as_a_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshape)
print(prediction)

if prediction[0]==0:
  print("The breast cancer is Malignant")
else:
  print("the breast cancer is bengin ")
